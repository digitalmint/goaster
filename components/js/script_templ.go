// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package js

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

var jsHandle = templ.NewOnceHandle()

func GoasterJS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<style type=\"text/css\">\n    /* [tempo] BEGIN - Do not edit! This section is auto-generated. */\nconst { DismissTimer = 3000, RemoveDuration = 500 } = options ?? {}\n\n/** Toast direction constants */\nconst DIRECTION_TOP = 'top'\nconst DIRECTION_BOTTOM = 'bottom'\n\n/** Auto-dismiss and removal durations */\nconst DISMISS_TIMER = DismissTimer\nconst REMOVE_DURATION = RemoveDuration\n\n/**\n * Removes all CSS classes from the specified element that start with the given prefix.\n * @param {HTMLElement} element - The element from which to remove classes.\n * @param {string} prefix - The prefix of classes to be removed.\n */\nfunction removeClassesWithPrefix(element, prefix) {\n  element.classList.forEach((className) => {\n    if (className.startsWith(prefix)) {\n      element.classList.remove(className)\n    }\n  })\n}\n\n/**\n * Performs the exit animation for a toast element and removes it from the DOM after the animation.\n *\n * @param {HTMLElement} element - The toast element to animate and remove.\n * @param {boolean} animated - Specifies whether to apply an exit animation.\n * @param {string} positionName - The position of the toast used to determine the direction of the exit animation.\n */\nfunction performExitAnimationAndRemove(element, animated, positionName) {\n  const classesToAdd = ['gttClose']\n\n  if (animated) {\n    classesToAdd.push(\n      positionName.startsWith(DIRECTION_TOP)\n        ? 'gttCloseFromTop'\n        : 'gttCloseFromBottom'\n    )\n  }\n  element.classList.add(...classesToAdd)\n\n  removeClassesWithPrefix(element, 'gttShow')\n  if (animated) removeClassesWithPrefix(element, 'gttShowFrom')\n\n  setTimeout(() => element.remove(), REMOVE_DURATION)\n}\n\n/**\n * Closes the toast by stopping event propagation, clearing auto-dismiss timer, and performing exit animation.\n * @param {Event} e - The event object.\n */\nfunction closeToast(e) {\n  e.stopPropagation()\n  const toast = e.target.closest('[class^=\"gttToast\"]')\n  if (toast) {\n    clearTimeout(Number(toast.dataset.dismissTimer))\n    performExitAnimationAndRemove(\n      toast,\n      toaster.Animation,\n      toaster.Position.Name\n    )\n  }\n}\n\n/**\n * Initializes the automatic dismissal of toasts with an optional progress bar animation.\n */\nconst handleAutoDismiss = {\n  init(isWithProgressBar) {\n    document\n      .querySelectorAll('[class^=\"gttToast\"][data-auto-dismiss=\"true\"]')\n      .forEach((toast) => {\n        if (isWithProgressBar) animateProgressBar(toast)\n\n        toast.dataset.dismissTimer = setTimeout(() => {\n          performExitAnimationAndRemove(\n            toast,\n            toaster.Animation,\n            toaster.Position.Name\n          )\n        }, DISMISS_TIMER)\n      })\n  }\n}\n\n/**\n * Initializes and animates the progress bar within a toast notification element.\n *\n * @param {HTMLElement} element - The toast notification element containing the progress bar.\n */\nfunction animateProgressBar(element) {\n  const progressBarElement = element.querySelector('[class^=\"gttProgressBar\"]')\n\n  if (progressBarElement) {\n    progressBarElement.style.transition = `width ${DISMISS_TIMER}ms linear`\n    progressBarElement.style.width = '100%'\n\n    requestAnimationFrame(() => {\n      progressBarElement.style.width = '0%'\n    })\n  }\n}\n\n/** Close toast on button click */\ndocument.body.addEventListener('click', (e) => {\n  const closeButton = e.target.closest('[class*=\"gttCloseBtn\"]')\n  if (closeButton) closeToast(e)\n})\n\n/** Initialize auto-dismiss on page load */\ndocument.addEventListener('DOMContentLoaded', () => {\n  if (toaster) handleAutoDismiss.init(toaster.ProgressBar)\n})\n\n/* [tempo] END */\n    </style>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = jsHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
